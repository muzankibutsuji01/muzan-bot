const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const fs = require('fs');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('deletemessages')
    .setDescription('üßπ Borra un n√∫mero espec√≠fico de mensajes en el canal actual.')
    .addIntegerOption(option =>
      option.setName('cantidad')
        .setDescription('N√∫mero de mensajes a borrar (m√°ximo 100)')
        .setRequired(true)
        .setMinValue(1)
        .setMaxValue(100)),

  async execute(interaction) {
    const cantidad = interaction.options.getInteger('cantidad');

    // Crear un embed elegante para la confirmaci√≥n
    const embed = new EmbedBuilder()
      .setTitle('üßπ Confirmaci√≥n para borrar mensajes')
      .setColor('#FF3B3F') // Color rojo al estilo de Muzan
      .setDescription(`¬øEst√°s seguro de que deseas borrar **${cantidad}** mensajes?`)
      .setFooter({ text: 'Confirmaci√≥n de borrado', iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    // Crear botones para confirmar o cancelar
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('confirmar')
        .setLabel('Confirmar')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('cancelar')
        .setLabel('Cancelar')
        .setStyle(ButtonStyle.Secondary)
    );

    // Enviar el mensaje de confirmaci√≥n
    await interaction.reply({
      embeds: [embed],
      components: [row],
      ephemeral: true
    });

    // Esperar la interacci√≥n del usuario (bot√≥n)
    const filter = i => i.user.id === interaction.user.id;
    const collector = interaction.channel.createMessageComponentCollector({ filter, time: 15000 });

    collector.on('collect', async i => {
      if (i.customId === 'confirmar') {
        // Borrar los mensajes si se confirma
        try {
          const messages = await interaction.channel.messages.fetch({ limit: cantidad });
          await interaction.channel.bulkDelete(messages, true);
          
          const successEmbed = new EmbedBuilder()
            .setTitle('‚úÖ Mensajes borrados')
            .setColor('#3FFDA5')
            .setDescription(`Se han borrado **${cantidad}** mensajes correctamente.`)
            .setFooter({ text: 'Operaci√≥n completada', iconURL: interaction.user.displayAvatarURL() })
            .setTimestamp();
          
          await i.update({
            embeds: [successEmbed],
            components: [] // Eliminar los botones despu√©s de la acci√≥n
          });

        } catch (error) {
          console.error('Error al borrar mensajes:', error);
          const errorEmbed = new EmbedBuilder()
            .setTitle('‚ùå Error al borrar mensajes')
            .setColor('#FF3B3F')
            .setDescription('Hubo un error al intentar borrar los mensajes. Intenta de nuevo m√°s tarde.')
            .setFooter({ text: 'Error', iconURL: interaction.user.displayAvatarURL() })
            .setTimestamp();

          await i.update({
            embeds: [errorEmbed],
            components: [] // Eliminar los botones despu√©s del error
          });
        }

      } else if (i.customId === 'cancelar') {
        // Cancelar la acci√≥n de borrado
        const cancelEmbed = new EmbedBuilder()
          .setTitle('‚ùå Borrado cancelado')
          .setColor('#FF3B3F')
          .setDescription('La acci√≥n de borrado ha sido cancelada.')
          .setFooter({ text: 'Operaci√≥n cancelada', iconURL: interaction.user.displayAvatarURL() })
          .setTimestamp();

        await i.update({
          embeds: [cancelEmbed],
          components: [] // Eliminar los botones despu√©s de la cancelaci√≥n
        });
      }
    });

    collector.on('end', collected => {
      if (collected.size === 0) {
        const timeoutEmbed = new EmbedBuilder()
          .setTitle('‚è≥ Tiempo de espera agotado')
          .setColor('#FF3B3F')
          .setDescription('El tiempo de espera para confirmar la acci√≥n ha expirado.')
          .setFooter({ text: 'Operaci√≥n no confirmada', iconURL: interaction.user.displayAvatarURL() })
          .setTimestamp();

        interaction.editReply({
          embeds: [timeoutEmbed],
          components: [] // Eliminar los botones despu√©s del tiempo agotado
        });
      }
    });
  },
};
